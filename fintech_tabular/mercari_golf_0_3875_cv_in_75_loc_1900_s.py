{"metadata":{"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os; os.environ['OMP_NUM_THREADS'] = '1'\nfrom contextlib import contextmanager\nfrom functools import partial\nfrom operator import itemgetter\nfrom multiprocessing.pool import ThreadPool\nimport time\nfrom typing import List, Dict\n\nimport keras as ks\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer as Tfidf\nfrom sklearn.pipeline import make_pipeline, make_union, Pipeline\nfrom sklearn.preprocessing import FunctionTransformer, StandardScaler\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.model_selection import KFold\n\n@contextmanager\ndef timer(name):\n    t0 = time.time()\n    yield\n    print(f'[{name}] done in {time.time() - t0:.0f} s')\n\ndef preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    df['name'] = df['name'].fillna('') + ' ' + df['brand_name'].fillna('')\n    df['text'] = (df['item_description'].fillna('') + ' ' + df['name'] + ' ' + df['category_name'].fillna(''))\n    return df[['name', 'text', 'shipping', 'item_condition_id']]\n\ndef on_field(f: str, *vec) -> Pipeline:\n    return make_pipeline(FunctionTransformer(itemgetter(f), validate=False), *vec)\n\ndef to_records(df: pd.DataFrame) -> List[Dict]:\n    return df.to_dict(orient='records')\n\ndef fit_predict(xs, y_train) -> np.ndarray:\n    X_train, X_test = xs\n    config = tf.ConfigProto(\n        intra_op_parallelism_threads=1, use_per_session_threads=1, inter_op_parallelism_threads=1)\n    with tf.Session(graph=tf.Graph(), config=config) as sess, timer('fit_predict'):\n        ks.backend.set_session(sess)\n        model_in = ks.Input(shape=(X_train.shape[1],), dtype='float32', sparse=True)\n        out = ks.layers.Dense(192, activation='relu')(model_in)\n        out = ks.layers.Dense(64, activation='relu')(out)\n        out = ks.layers.Dense(64, activation='relu')(out)\n        out = ks.layers.Dense(1)(out)\n        model = ks.Model(model_in, out)\n        model.compile(loss='mean_squared_error', optimizer=ks.optimizers.Adam(lr=3e-3))\n        for i in range(3):\n            with timer(f'epoch {i + 1}'):\n                model.fit(x=X_train, y=y_train, batch_size=2**(11 + i), epochs=1, verbose=0)\n        return model.predict(X_test)[:, 0]\n\ndef main():\n    vectorizer = make_union(\n        on_field('name', Tfidf(max_features=100000, token_pattern='\\w+')),\n        on_field('text', Tfidf(max_features=100000, token_pattern='\\w+', ngram_range=(1, 2))),\n        on_field(['shipping', 'item_condition_id'],\n                 FunctionTransformer(to_records, validate=False), DictVectorizer()),\n        n_jobs=4)\n    y_scaler = StandardScaler()\n    with timer('process train'):\n        train = pd.read_table('../input/train.tsv')\n        train = train[train['price'] > 0].reset_index(drop=True)\n        cv = KFold(n_splits=20, shuffle=True, random_state=42)\n        train_ids, valid_ids = next(cv.split(train))\n        train, valid = train.iloc[train_ids], train.iloc[valid_ids]\n        y_train = y_scaler.fit_transform(np.log1p(train['price'].values.reshape(-1, 1)))\n        X_train = vectorizer.fit_transform(preprocess(train)).astype(np.float32)\n        print(f'X_train: {X_train.shape} of {X_train.dtype}')\n        del train\n    with timer('process valid'):\n        X_valid = vectorizer.transform(preprocess(valid)).astype(np.float32)\n    with ThreadPool(processes=4) as pool:\n        Xb_train, Xb_valid = [x.astype(np.bool).astype(np.float32) for x in [X_train, X_valid]]\n        xs = [[Xb_train, Xb_valid], [X_train, X_valid]] * 2\n        y_pred = np.mean(pool.map(partial(fit_predict, y_train=y_train), xs), axis=0)\n    y_pred = np.expm1(y_scaler.inverse_transform(y_pred.reshape(-1, 1))[:, 0])\n    print('Valid RMSLE: {:.4f}'.format(np.sqrt(mean_squared_log_error(valid['price'], y_pred))))\n\nif __name__ == '__main__':\n    main()\n","metadata":{"collapsed":false,"_kg_hide-input":false,"jupyter":{"outputs_hidden":false}},"execution_count":null,"outputs":[]}]}